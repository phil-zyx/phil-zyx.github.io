<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 孩子不会飞</title>
    <link>https://Phil-zyx.github.io/posts/</link>
    <description>Recent content in Posts on 孩子不会飞</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 05 Mar 2023 23:24:25 +0800</lastBuildDate><atom:link href="https://Phil-zyx.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>游戏服务器开发的未来？</title>
      <link>https://Phil-zyx.github.io/posts/gameserverprogrammer/</link>
      <pubDate>Sun, 05 Mar 2023 23:24:25 +0800</pubDate>
      
      <guid>https://Phil-zyx.github.io/posts/gameserverprogrammer/</guid>
      <description>脑暴想法的由来  话题来自知乎，从而衍生的想法，记录下来 游戏服务器开发属于游戏开发鄙视链底端？ 米哈游出品的原神，告诉了游戏服务器开发一个事情，策划+客户端+美术出品的若服务器游戏模式也可以相当成功。是不是随着原神模式的发展，游戏服务器开发这个岗位需求将越来越少？ chatGPT 这把火越烧越大，游戏服务器开发能集成进游戏服务端去吗？游戏服务器开发能不能造就现象级的，对游戏具备影响的东西呢？  自问自答  游戏服务器开发是不是在鄙视链末端，这点有待商榷，就当前SLG游戏来说，作为打工人的同事，策划or运营，都认为自己在末端。技术无边界，这里的出发点是单纯从游戏来说，游戏的核心是玩法和表现，这里最重要的是策划、客户端、美术，这些东西是直接影响到玩家的，作为一个游戏玩家，不会直观的了解到服务器，这也说明服务器对游戏的影响很小。如此，服务器开发确实在一个末端。 最近刷到原神又成为了收入榜头名，原神模式是不是真的可以抄作业呢？我认为不可。从游戏收入排行榜来看，此模式仅此一家，此类游戏的市场份额极小。同榜单的王者、PUBG等模式仍然是主流，这类和服务器强交互的游戏依然是市场的大头。原神模式会带动一些厂商往这个方向靠，但是赛道依然是各种游戏品类共进的，大部分游戏品类，是无法脱离服务器的。 特别是openAI开放了接口之后，各类chatGPT衍生的项目如雨后春笋般。有些让人眼前一亮的，如chatPDF、自建的自动客服等。那么对于游戏来说，有哪些地方可以接入：对话NPC、游戏内的自动客服、游戏玩法介绍问答等。而现象级的，我想应该是真正的AI，比如引导机器人、对战机器人，可以做到有边界，也有训练，真正做到玩家无法感知其是否是人机。  一些思考  开发不应该设置技术壁垒。具体的说游戏服务器开发和后端开发，客户端开发只是技术侧重点差别而已，其技术本身并没有太大的差别，程序始终都应该保持对技术本身的追求。 如果有想要做独立游戏的想法，那么技术无边界也引导自身去学习客户端开发。AI的发展，像是图像生成已经变得相当可行，做产品会比之前更加简单，我们要去成为站在巨人肩膀上的人。 畅想未来游戏服务器是怎么样的？   云与云计算 AI像真实玩家一样 云游戏，随时随地3A大作 脑机接口 and VR：像《游戏玩家》一样的游戏  </description>
    </item>
    
    <item>
      <title>对go调度的浅读</title>
      <link>https://Phil-zyx.github.io/posts/%E5%AF%B9go%E8%B0%83%E5%BA%A6%E7%9A%84%E6%B5%85%E8%AF%BB/</link>
      <pubDate>Sun, 09 Jan 2022 20:16:47 +0800</pubDate>
      
      <guid>https://Phil-zyx.github.io/posts/%E5%AF%B9go%E8%B0%83%E5%BA%A6%E7%9A%84%E6%B5%85%E8%AF%BB/</guid>
      <description>go语言为什么能变的如此受欢迎，很大一个原因是其原生支持高并发，而这核心来自goroutine的设计，而对goroutine的管理则离不开go的调度器。
调度的定义  要理解调度，就必要先理解操作系统、进程、线程等调度的基本概念。
  操作系统：一种计算机程序，管理硬件与软件资源，计算机系统的&amp;quot;底层软件&amp;quot;，如windows,macOS,Linux 进程：操作系统下程序运行单位，有独立的内存，由内核调度 线程：操作系统调度最小单元，一般属于进程，共享进程的内存与资源，由内核调度（比进程轻量） 协程：用户级线程，不由内核调度，通过程序员显示的调度（比线程轻量） 调度：调度本质上就是一个资源分配算法。  Go 调度设计  goroutine 和线程的关系即一个main函数创建一个操作线程——主线程，之后会由go的调度模型来负责创建和管理 goroutine 分配到具体哪个线程.
 历史  最简单的调度器（Go 0.x）：单线程 G-M：缺陷是程序只能存在一个活跃线程 改进为多线程（Go 1.0）：G-M：互斥锁带来的开销 进阶版本（Go 1.2 至今）：G-P-M：多了一层P抽象  G-P-M   定义：src/runtime/runtime2.go
  G：goroutine，需要绑定一个 m 来运行
type g struct { ... m *m // current m; offset known to arm liblink  preempt bool // 抢占标记  stackguard0 uintptr //  ... }   P：processor, a resource that is required to execute Go code.</description>
    </item>
    
    <item>
      <title>漫谈游戏服务器节点通信</title>
      <link>https://Phil-zyx.github.io/posts/%E6%BC%AB%E8%B0%88%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8A%82%E7%82%B9%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Sun, 14 Mar 2021 15:21:31 +0800</pubDate>
      
      <guid>https://Phil-zyx.github.io/posts/%E6%BC%AB%E8%B0%88%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%8A%82%E7%82%B9%E9%80%9A%E4%BF%A1/</guid>
      <description>最近工作上做了一些关于跨服玩法的内容，对于 RPC 通信实现这块做下学习笔记整理。
 分布式架构 当下的大环境下，服务器架构基本都是分布式架构。分布式架构带来的最大好处在于服务扩展，我们 SLG 游戏服务器从游戏特性上来说，符合小服架构（一个服即一个生态），这样从分布式架构的设计理念，按功能划分，网关、支付、战场（这里不是指单服的战斗要实现一个节点，而是一些副本玩法，跨服玩法等设计的）、第三方等，这样的每个 server 我们称之为一个节点（Node）。
RPC RPC:允许运行于一台计算机的程序调用另一个计算机的程序。RPC是一种服务器-客户端（Client/Server）模式。
RPC 的核心概念即调用远程服务就像调用本地的一个函数一样简单。
通过原理我们知道 RPC 需要实现的几个点:
 通信：在两个 server 之间建立连接 寻址：如何定位需要调用 x-Server 序列化：两个 server 之间是网络通信，那么二进制传输就需要序列化  一些常用的框架（轮子必然是有的）：
 gRPC: 谷歌开源 RPC 框架，基于 HTTP/2 协议通信和 ProtoBuf 序列化协议 Thrift: Apache 旗下，基于 Facebook 的 RPC 框架开发 JsonRPC: 无状态、轻量级，基于 json 序列化  框架选择：两个项目，早期的一个选择 thrift （当时 gRPC 才开源初期），另一个选择了 gRPC ，对比来说，两者在使用上区别不是很大，但是 gRPC 能拥有良好的文档，更加简洁和拥有广泛使用的 ProtoBuf，而 thrift 的大优势是支持多语言。选择根据项目自身的特性来，对于我们项目，文档和简洁比较重要。（技术选型还得是项目初始大佬们的选择:joy:）
节点间通信 如上，RPC 框架选择 gRPC，基于此，整个通信流程：
client -&amp;gt; gateway -&amp;gt; game server -&amp;gt; other server -&amp;gt; 处理后返回</description>
    </item>
    
    <item>
      <title>一道GO编程题的反思</title>
      <link>https://Phil-zyx.github.io/posts/%E4%B8%80%E9%81%93go%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9A%84%E5%8F%8D%E6%80%9D/</link>
      <pubDate>Sat, 06 Mar 2021 11:48:00 +0800</pubDate>
      
      <guid>https://Phil-zyx.github.io/posts/%E4%B8%80%E9%81%93go%E7%BC%96%E7%A8%8B%E9%A2%98%E7%9A%84%E5%8F%8D%E6%80%9D/</guid>
      <description>题目：循环按序打印&amp;quot;dog&amp;quot;、&amp;ldquo;cat&amp;rdquo;、fish&amp;quot;，分别使用三个 goroutine.
 拿到题目，感觉简单又不简单的样子，先动手写一个最简单的打印：
func main() { times := 100 go func() { for i := 0; i&amp;lt;times; i++ { println(&amp;#34;dog&amp;#34;) println(&amp;#34;cat&amp;#34;) println(&amp;#34;fish&amp;#34;) } }() time.Sleep(100 * 1000) // 这时间我能算出来么，那用 channel 来接收吧 } 改进一下这让人无法预估的等待时间：使用 channel，在 goroutine 执行完之后通知主程序，巩固依稀 gorutine 和 channel 的基础知识：
 gorutine 是并发核心，main 函数也是一个 gorutine go func() {}() 匿名函数要注意参数传入 channel 通过 make 创建，make(chan typ) 需要声明好类型 channel 通过 &amp;lt;-ch ch &amp;lt;- data 来接收和发送信息 channel make(ch, int, 1 表示该 ch 是一个有1个数据缓冲的 chan，即在没有接收数据的情况下，第二条数据发送之后才会阻塞 func (ch chan &amp;lt;- int) 声明 ch 是一个单向 channel close后的 chan 依然可以接收缓冲通道的数据，但不可发送数据 select {case &amp;lt;- ch: xx} 处理不同消息  func main() { waitCh := make(chan struct{}, 1) times := 100 go func() { for i := 0; i &amp;lt; times; i++ { println(&amp;#34;dog&amp;#34;) println(&amp;#34;cat&amp;#34;) println(&amp;#34;fish&amp;#34;) } waitCh &amp;lt;- struct{}{} }() &amp;lt;-waitCh } waitCh 听起来怎么这么熟悉呢？go 本身在面对这些情况已经实现了一个工具类，sync 包中提供的基础原语： waitGroup 。巩固一下：</description>
    </item>
    
    <item>
      <title>2020 年终总结</title>
      <link>https://Phil-zyx.github.io/posts/summary2020/</link>
      <pubDate>Mon, 28 Dec 2020 20:52:28 +0800</pubDate>
      
      <guid>https://Phil-zyx.github.io/posts/summary2020/</guid>
      <description>2020 即将过去，这一年最大的总结就是：什么目标也没有完成。</description>
    </item>
    
  </channel>
</rss>
